<?php
declare(strict_types=1);

namespace Attlaz\Base\Pricing;

use Attlaz\Base\Helper\CatalogHelper;
use Attlaz\Base\Helper\Data;
use Attlaz\Base\Helper\RealTime\RealTimeRenderHelper;
use Magento\Framework\Pricing\Render\Layout;
use Magento\Framework\Pricing\SaleableInterface;
use Magento\Framework\View\Element\Template;
use Attlaz\Base\Helper\CustomerHelper;

class Render extends \Magento\Framework\Pricing\Render
{
    /** @var CustomerHelper */
    private $customerHelper;
    /** @var RealTimeRenderHelper */
    private $realTimeRenderHelper;
    private $catalogHelper;

    public function __construct(Template\Context $context, Layout $priceLayout, CustomerHelper $customerHelper,CatalogHelper $catalogHelper, RealTimeRenderHelper $realTimeRenderHelper, array $data = [])
    {
        parent::__construct($context, $priceLayout, $data);
        $this->_isScopePrivate = true;
        $this->customerHelper = $customerHelper;
        $this->catalogHelper = $catalogHelper;
        $this->realTimeRenderHelper = $realTimeRenderHelper;
    }

    public function getCacheLifetime()
    {
        return parent::getCacheLifetime();
    }

    public function getCacheTags()
    {
        return parent::getCacheTags(); // TODO: Change the autogenerated stub
    }

    public function getCacheKeyInfo()
    {
        $keys = parent::getCacheKeyInfo();
        $keys[] = 'attlaz_external_id:' . $this->customerHelper->getCurrentCustomerExternalId();

        return $keys;
    }

    public function render($priceCode, SaleableInterface $saleableItem, array $arguments = [])
    {

        $html = '<div class="price-box"></div>';

        if ($this->customerHelper->shouldDisplayPrices()) {


            if ($this->shouldRenderRealTimePrice($saleableItem)) {
                if ($this->isRealTimePriceLoaded()) {
                    $html = parent::render($priceCode, $saleableItem, $arguments);
                } else {
                    if ($this->customerHelper->shouldDisplayPricesBeforeRealTimeUpdate()) {
                        $html = parent::render($priceCode, $saleableItem, $arguments);
                    }
                    $arguments['render_block'] = '';
                    $arguments['cache_lifetime'] = null;

                    $data = [
                        'priceCode' => $priceCode,
                        'arguments' => $arguments,
                    ];

                    $productId = intval($saleableItem->getId());

                    $html = $this->realTimeRenderHelper->renderRealTimeProductPriceInfo($productId, $this, $data, $html);
                }
            } else {
                $html = parent::render($priceCode, $saleableItem, $arguments);
            }
        }

        return $html;
    }

    private function shouldRenderRealTimePrice(SaleableInterface $saleableItem): bool
    {
        if ($saleableItem->getTypeId() === 'configurable') {
            return false;
        }

        return true;
        $value = intval($this->_scopeConfig->getValue('attlaz/catalog/show_realtime_stock'));

        return ($value === 1);
    }

    private function isRealTimePriceLoaded(): bool
    {
        return $this->hasData(Data::BLOCK_DATA_FLAG_CONTAINS_REAL_TIME_DATA);
    }

}
